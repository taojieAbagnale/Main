
var canvas;
var gl;

var NumVertices  = 36;

var points = [];
var colors = [];

//***********************
//以下变量作为镜头的xyz变量
var xAxis = 0;
var yAxis = 0;
var zAxis = 2;
//以下变量作为控制eye的eyeRadius，eyePhi，eyeTheta
var eyeRadius=4;
var eyePhi=0;
var phiBool=1;
var eyeTheta=0;
//以下变量作为scale进行传递
var mScale=0;
var scaleOrNot=0;
//********************

var axis = 0;
var theta = [ 0, 0, 0 ];

var thetaLoc;
var pingxing=0;

window.onload = function in0it()
{
	//读取各个滑条
	document.getElementById("cubeScale").onchange=function(event){
		mScale=event.target.value;
		scaleOrNot=1;
		
	};

	document.getElementById("radiusSlider").onchange=function(event){
		eyeRadius=event.target.value;
		
	};
	document.getElementById("thetaSlider").onchange=function(event){
		eyeTheta=event.target.value;

		
		
	};
	document.getElementById("phiSlider").onchange=function(event){
		eyePhi=event.target.value;
		
	};
	document.getElementById("walkX").onchange=function(event){
		xAxis=event.target.value;
		
	};
	document.getElementById("walkY").onchange=function(event){
		yAxis=event.target.value;
		
	};
	document.getElementById("walkZ").onchange=function(event){
		zAxis=event.target.value;
		
	};
	document.getElementById("pingxing").onclick=function(event){
		pingxing=1;
		
	};
	document.getElementById("toushi").onclick=function(event){
		pingxing=0;
		
	};


    canvas = document.getElementById( "gl-canvas" );
    
    gl = WebGLUtils.setupWebGL( canvas );
    if ( !gl ) { alert( "WebGL isn't available" ); }
	
    colorCube();
	 var m = new matIV();
	 var mMatrix = m.identity(m.create());
    var vMatrix = m.identity(m.create());
    var pMatrix = m.identity(m.create());
    var tmpMatrix = m.identity(m.create());
    var mvpMatrix = m.identity(m.create());
    
    
 
    
	
	


    gl.viewport( 0, 0, canvas.width, canvas.height );
    gl.clearColor( 0, 0, 0,1 );
    
    gl.enable(gl.DEPTH_TEST);

    //
    //  Load shaders and initialize attribute buffers
    //
    var program = initShaders( gl, "vertex-shader", "fragment-shader" );
    gl.useProgram( program );
    
    var cBuffer = gl.createBuffer();
    gl.bindBuffer( gl.ARRAY_BUFFER, cBuffer );
    gl.bufferData( gl.ARRAY_BUFFER, flatten(colors), gl.STATIC_DRAW );

    var vColor = gl.getAttribLocation( program, "vColor" );
    gl.vertexAttribPointer( vColor, 4, gl.FLOAT, false, 0, 0 );
    gl.enableVertexAttribArray( vColor );

    var vBuffer = gl.createBuffer();
    gl.bindBuffer( gl.ARRAY_BUFFER, vBuffer );
    gl.bufferData( gl.ARRAY_BUFFER, flatten(points), gl.STATIC_DRAW );
    

    var vPosition = gl.getAttribLocation( program, "vPosition" );
    gl.vertexAttribPointer( vPosition, 4, gl.FLOAT, false, 0, 0 );
    gl.enableVertexAttribArray( vPosition );

    thetaLoc = gl.getUniformLocation(program, "theta"); 
	var uniLocation= gl.getUniformLocation(program, "mvpMatrix"); 
	 
	 
    
    //event listeners for buttons

	//修改以下参数达到控制镜头的效果
	m.scale(mMatrix,[1, 1,1], mMatrix);//实现缩放功能
	var templ=2;
     
   (function(){
	
	
	templ=Math.sqrt(Math.pow(xAxis,2)+Math.pow(yAxis,2)+Math.pow(zAxis,2));
	
	 m.lookAt1([xAxis, yAxis, zAxis], [templ*Math.sin(eyeTheta*Math.PI/180),templ*Math.sin(eyePhi*Math.PI/180),templ-Math.cos(eyeTheta*Math.PI/180)-templ*Math.cos(eyePhi*Math.PI/180)], [0,1,0], vMatrix);//实现透视投影功能 中间的向量控制角度  最开始的向量控制xyz
     
	 if(pingxing==1) {
			
			pMatrix=m.ortho1( -2, 2, -2, 2, 0.2, 2,pMatrix);
			
	}else{
		 m.perspective(90, canvas.width / canvas.height, 0.04, eyeRadius*4, pMatrix);//控制半径和phi
    
	}

	if(scaleOrNot){
		m.scale(mMatrix,[mScale, mScale,mScale], mMatrix);
		scaleOrNot=0;
	}
	 m.multiply(pMatrix, vMatrix, tmpMatrix);
	

	m.multiply(tmpMatrix, mMatrix, mvpMatrix);
  
	 gl.uniformMatrix4fv(uniLocation, false, mvpMatrix);
   
    gl.clear( gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    
	
    gl.drawArrays( gl.TRIANGLES, 0, NumVertices );
   
        setTimeout(arguments.callee, 1000 / 30);
   })();
   
}

function colorCube()
{

    quad( 1, 0, 3, 2 );

    quad( 2, 3, 7, 6 );
    quad( 3, 0, 4, 7 );
    quad( 6, 5, 1, 2 );
    quad( 4, 5, 6, 7 );
    quad( 5, 4, 0, 1 );
}

function quad(a, b, c, d) 
{

    var vertices = [
        vec4( -0.5, -0.5,  0.5, 1.0 ),
        vec4( -0.5,  0.5,  0.5, 1.0 ),
        vec4(  0.5,  0.5,  0.5, 1.0 ),
        vec4(  0.5, -0.5,  0.5, 1.0 ),
        vec4( -0.5, -0.5, -0.5, 1.0 ),
        vec4( -0.5,  0.5, -0.5, 1.0 ),
        vec4(  0.5,  0.5, -0.5, 1.0 ),
        vec4(  0.5, -0.5, -0.5, 1.0 )
    ];
	
    var vertexColors = [
        [ 0.0, 0.0, 0.0, 1.0 ],  // black
        [ 1.0, 0.0, 0.0, 1.0 ],  // red
        [ 1.0, 1.0, 0.0, 1.0 ],  // yellow
        [ 0.0, 1.0, 0.0, 1.0 ],  // green
        [ 0.0, 0.0, 1.0, 1.0 ],  // blue
        [ 1.0, 0.0, 1.0, 1.0 ],  // magenta
        [ 0.0, 1.0, 1.0, 1.0 ],  // cyan
        [ 1.0, 1.0, 1.0, 1.0 ]   // white
    ];

    // We need to parition the quad into two triangles in order for
    // WebGL to be able to render it.  In this case, we create two
    // triangles from the quad indices
    
    //vertex color assigned by the index of the vertex
    
    var indices = [ a, b, c, a, c, d ];
	
    for ( var i = 0; i < indices.length; ++i ) {
        points.push( vertices[indices[i]] );
        //colors.push( vertexColors[indices[i]] );
    
        // for solid colored faces use 
        colors.push(vertexColors[a]);
        
    }
}

